// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

// model User {
//   id        Int      @id @default(autoincrement())
//   email     String   @unique
//   username  String   @unique
//   password  String
//   role      Role     @default(USER)
//   createAt  DateTime @default(now())
//   updateUt  DateTime @updatedAt
//   profile   Profile  @relation(fields: [profileId], references: [id])
//   profileId Int      @unique
// }
//
// model Profile {
//   id     Int     @id @default(autoincrement())
//   user   User?
//   name   String?
//   avatar String?
//   cover  String?
//   about  String?
// }

model Account {
    id                Int     @id @default(autoincrement())
    userId            Int
    type              String?
    provider          String
    password          String?
    providerAccountId String?
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           Int      @id @default(autoincrement())
    sessionToken String   @unique
    userId       Int
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id             Int              @id @default(autoincrement())
    name           String?
    email          String?          @unique
    role           Role             @default(BUYER)
    username       String?          @unique
    image          String?
    cover          String?
    about          String?
    emailVerified  DateTime?
    idCity         Int              @default(1)
    city           City             @relation(fields: [idCity], references: [id])
    nameShop       String?
    description    String?
    deliveryTime   Int?             @default(4)
    deliveryCost   Int?             @default(300)
    accounts       Account[]
    sessions       Session[]
    sellerSity     SellerCity[]
    products       Product[]
    forgorPassword ForgotPassword[]
    orders         Orders[]
    cityWay        CityWay[]
    productRating  ProductRating[]
    orderCancells  OrderCancells[]
    basketToken    BasketToken[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum Role {
    BUYER
    SELLER
}

enum TypePoint {
    Warehouse // Склад
    PickPoint // Пункт выдачи
    Transit //Транзитный
}

model City {
    id             Int          @id @default(autoincrement())
    name           String
    sellerCity     SellerCity[]
    city1          CityWay[]    @relation("city1")
    player2Matches CityWay[]    @relation("city2")
    users          User[]
}

model SellerCity {
    id                 Int                  @id @default(autoincrement())
    user               User                 @relation(fields: [idUser], references: [id])
    idUser             Int
    city               City                 @relation(fields: [idCity], references: [id])
    idCity             Int
    typePoint          TypePoint            @default(Transit)
    sellerCityProducts SellerCityProducts[]
}

model SellerCityProducts {
    id           Int        @id @default(autoincrement())
    sellerCity   SellerCity @relation(fields: [idSellerCity], references: [id])
    idSellerCity Int
    product      Product    @relation(fields: [idProduct], references: [id])
    idProduct    Int
    count        Int?
}

model Product {
    id                 Int                  @id @default(autoincrement())
    name               String?              @db.Text
    image              String?
    price              Float?
    length             Float?
    width              Float?
    height             Float?
    weight             Float?
    description        String?              @db.Text
    status             Boolean?
    category           Category             @relation(fields: [idCategory], references: [id])
    idCategory         Int
    user               User                 @relation(fields: [idUser], references: [id])
    idUser             Int
    sellerCityProducts SellerCityProducts[]
    count              Int?
    basket             Basket[]
    orderProducts      OrderProducts[]
    productRating      ProductRating[]
}

model Category {
    id      Int       @id @default(autoincrement())
    name    String //Название
    icon    String?
    product Product[]
}

model ForgotPassword {
    id     Int     @id @default(autoincrement())
    token  String?
    user   User    @relation(fields: [idUser], references: [id])
    idUser Int
}

model BasketToken {
    id      Int      @id @default(autoincrement())
    token   String
    expires DateTime
    basket  Basket[]
    user    User?    @relation(fields: [idUser], references: [id])
    idUser  Int?
}

model Basket {
    id         Int         @id @default(autoincrement())
    product    Product     @relation(fields: [id_product], references: [id])
    id_product Int
    token      BasketToken @relation(fields: [id_token], references: [id])
    id_token   Int
    quantity   Int
}


model Orders {
    id            Int             @id @default(autoincrement())
    user          User            @relation(fields: [idUser], references: [id])
    idUser        Int
    status        OrderStatus     @relation(fields: [idStatus], references: [id])
    idStatus      Int
    date          DateTime?
    cost          Float?
    deliveryCost  Float?
    totalCost     Float?
    allDuration   Float?
    allLength     Float?
    orderProducts OrderProducts[]
    orderCancells OrderCancells[]
}

model OrderStatus {
    id     Int      @id @default(autoincrement())
    name   String
    orders Orders[]
}

model OrderCancells {
    id      Int    @id @default(autoincrement())
    order   Orders @relation(fields: [idOrder], references: [id])
    idOrder Int
    user    User   @relation(fields: [idUser], references: [id])
    idUser  Int
    message String
}

model OrderProducts {
    id        Int     @id @default(autoincrement())
    order     Orders  @relation(fields: [idOrder], references: [id])
    idOrder   Int
    product   Product @relation(fields: [idProduct], references: [id])
    idProduct Int
    price     Int?
    quantity  Int?
}

//Маршрут между городами
model CityWay {
    id               Int                @id @default(autoincrement())
    city1            City               @relation(fields: [idCity1], references: [id], name: "city1")
    idCity1          Int
    city2            City               @relation(fields: [idCity2], references: [id], name: "city2")
    idCity2          Int
    user             User               @relation(fields: [idUser], references: [id])
    idUser           Int
    cityWayTransport CityWayTransport[]
}

model CityWayTransport {
    id          Int       @id @default(autoincrement())
    duration    Float? //Длительность (ч)
    cost        Float? //Стоимость (руб)
    length      Float? //Протяжённость (км)
    cityWay     CityWay   @relation(fields: [idCityWay], references: [id])
    idCityWay   Int
    transport   Transport @relation(fields: [idTransport], references: [id], onUpdate: Cascade)
    idTransport Int
}

model Transport {
    id               Int                @id @default(autoincrement())
    name             String
    cityWayTransport CityWayTransport[]
}

model ProductRating {
    id            Int     @id @default(autoincrement())
    product       Product @relation(fields: [idProduct], references: [id])
    idProduct     Int
    rate          Int
    Dignities     String?
    Disadvantages String?
    Comment       String?
    user          User    @relation(fields: [idUser], references: [id])
    idUser        Int
}
